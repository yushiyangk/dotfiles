#!/usr/bin/env bash

# Install configuration dotfiles into user home directory.
# Usage: ./install_dotfiles.sh
#
# Yu Shiyang <yu.shiyang@gnayihs.uy>

# Make a copy of the file with a tilde added to its filename.
# If a file of the new name already exists, do not make a copy.
# This function is idempotent.
# Usage: tildeless <filename>
tildeless() {
	file="$1"
	if [ ! -e "$file" ]; then
		echo "tildeless: $file does not exist" >& 2
		return 1
	fi

	tildefile="$file~"
	if [ -e "$tildefile" ]; then
		if [ -d "$file" ]; then
			if [ ! -d "$tildefile" ]; then
				echo "tildeless: $tildefile already exists but is not a directory" >& 2
				return 3
			else
				return
			fi
		elif [ -f "$file" ]; then
			if [ ! -f "$tildefile" ]; then
				echo "tildeless: $tildefile already exists but is not a file" >& 2
				return 3
			else
				return
			fi
		fi
	fi

	if [ -d "$file" ]; then
		mv "$file" "$tildefile"
		cp -a "$tildefile" "$file"
		chmod -R --preserve-root a-wx,+X "$tildefile"
	elif [ -f "$file" ]; then
		mv "$file" "$tildefile"
		cp -a "$tildefile" "$file"
		chmod a-wx "$tildefile"
	else
		echo "tildeless: $file is not a file or a directory" >& 2
		return 2
	fi
}

# Move the file to the given backup directory (creating it if it does not exist)
# Usage: backup_file <original_file> <archive_dir>
archive_file() {
	file="$1"
	archive_dir="$2"

	if [ -e "$archive_dir" ]; then
		if [ ! -d "$archive_dir" ]; then
			echo "archive_file: $archive_dir exists but is not a directory" >& 2
			return 2
		fi
	else
		mkdir --parents "$archive_dir"
	fi

	mv "$file" "$archive_dir"
}

# If a local patch for the file exists, apply it.
# A local patch for a given file is denoted by filename.local.patch in the same directory.
# Also appends files locally if one exists, denoted by filename.local.append in the same directory.
# Usage: local_patch_append <filename> [<source_filename_to_patch_from = filename> [<output_filename = filename>]]
local_patch_append() {
	file="$1"
	source="$2"
	output="$3"
	source="${source:-"$file"}"
	output="${output:-"$file"}"
	if [ -f "$file.local.patch" ]; then
		if [ "$source" = "$output" ]; then
			patch "$source" "$file.local.patch"
		else
			patch "$source" "$file.local.patch" -o "$output"
		fi
		if [ -f "$file.local.append" ]; then
			cat "$output" "$file.local.append" > "$output"
		fi
	elif [ -f "$file.local.append" ]; then
		cat "$source" "$file.local.append" > "$output"
	fi
}

# Install a new file, then apply any local patches and appends in the same directory.
# Usage: install_file <source_file> <filename_after_install> <archive_dir>
install_file() {
	source="$1"
	installed="$2"
	archive_dir="$3"

	if [ ! -e "$source" ];  then
		echo "install_file: $source does not exist" >& 2
		return 1
	elif [ ! -f "$source" ]; then
		echo "install_file: $source is not a file" >& 2
		return 2
	fi

	# ${VAR%pattern} returns VAR with the shortest matching pattern stripped from the back
	if [ -e "$installed" ]; then
		if [ -f "$installed" ]; then
			# Exit if there will be no change after installation
			# Check if the installed file has patches or appends

			# ${VAR##pattern} returns VAR with the longest matching pattern stripped from the front
			simulated_installed="/tmp/${installed##*/}.installed"
			local_patch_append "$installed" "$source" "$simulated_installed" &> /dev/null
			if [ ! -f "$simulated_installed" ]; then
				simulated_installed="$source"
			fi
			if cmp --silent "$installed" "$simulated_installed"; then
				# Exit if identical
				echo "Skipping '$source'; aleady installed at '$installed'"
				return 0
			fi

			echo "Installing '$source' -> '$installed'"

			tildeless "$installed"  # Does not tilde if a tilde file already exists
			archive_file "$installed" "$archive_dir"
			#rm "$installed"
		else
			echo "install_file: $installed is not a file" >& 2
			return 2
		fi
	else
		echo "Installing '$source' -> '$installed'"

		mkdir -p "${installed%/*}"
	fi

	cp "$source" "$installed"
	local_patch_append "$installed"
}

# Install files from source dir to target dir, and apply any local patches and appends for each file
# Usage: install_files <source_dir> <target_dir> <archive_dir>
install_files() {
	source_dir="$1"
	target_dir="$2"
	archive_dir="$3"

	# `bash -c '<command> $0 $1' <arg1> <arg2>` executes <command> with <arg1> and <arg2> as its first and second arguments
	# `${<VAR>#<pattern>}`` returns <VAR> with the longest string that matches <pattern> stripped from the front
	# `"{}"`` would be any file in `posix/` by default
	find "$source_dir" -type f -exec bash -c 'install_file "$0" "$HOME/${0##*/}" "$1"' "{}" "$archive_dir" \;
}

export -f tildeless
export -f archive_file
export -f local_patch_append
export -f install_file
export -f install_files


name='dotfiles'

help="Usage: $name [-h] [<options>] <command> [<label>]"
help="$help\nSync config files with a remote git repository and install them to the local system"
help="$help\n"
help="$help\nParameters:"
help="$help\n  <command>       Choices: sync, install"
help="$help\n                   install - install the current version of config files"
help="$help\n                   sync - pull the latest version of config files from the"
help="$help\n                          configured remote git repository, and install them"
help="$help\n  <label>         label of config files to be installed, corresponding to the"
help="$help\n                   subdirectory of the same name; default: posix"
help="$help\n"
help="$help\nOptions:"
help="$help\n  -h, -?, --help  Display this help message and exit"


command='none'
label='posix'
quiet=0

argi=0
while [ $# -gt 0 ]; do
	arg="$1"
	case "$arg" in
		--help)
			echo -e "$help"
			exit 0
			;;
		--quiet)
			((++quiet))
			;;
		--*)
			echo "$name: invalid option '$arg'" >& 2
			exit 2
			;;
		-*)
			for i in $(seq 1 $((${#arg} - 1))); do
				flag="${arg:$i:1}"
				case "$flag" in
					h|\?)
						echo -e "$help"
						exit 0
						;;
					q)
						((++quiet))
						;;
					*)
						echo "$name: invalid option '$flag'" >& 2
						exit 2
				esac
			done
			;;
		*)
			case "$argi" in
				0)
					command="$arg"
					;;
				1)
					label="$arg"
					;;
				*)
					echo "$name: unexpected parameter '$arg'" >& 2
					exit 2
					;;
			esac
			((++argi))
	esac
	shift
done


timestamp="$( date +'%Y%m%d-%H%M%S' )"
archive_dir=".backup/$label-$timestamp"

case "$command" in
	install)
		install_files "$label" "$HOME" "$archive_dir"
		;;
	sync)
		git pull --ff-only && install_files "$label" "$HOME" "$archive_dir"
		;;
	none)
		echo "$name: missing command, required as first parameter" >& 2
		exit 3
		;;
	*)
		echo "$name: unknown command '$command'" >& 2
		exit 4
		;;
esac


unset tildeless
unset archive_file
unset local_patch_append
unset install_file
unset install_files

unset command
unset label

unset timestamp
unset archive_dir
